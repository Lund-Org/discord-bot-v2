generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Birthday {
  id            Int    @id @default(autoincrement())
  discordId     String @unique @db.VarChar(255)
  birthdayDay   Int
  birthdayMonth Int
  birthdayYear  Int
}

model BacklogItem {
  id         Int           @id @default(autoincrement())
  userId     Int
  igdbGameId Int
  name       String
  category   String
  url        String
  status     BacklogStatus @default(BACKLOG)
  note       String?       @db.VarChar(255)
  order      Int           @default(0)
  user       User          @relation(fields: [userId], references: [id])

  backlogItemReview BacklogItemReview?

  @@unique([userId, igdbGameId])
}

model BacklogItemReview {
  id                Int     @id @default(autoincrement())
  backlogItemId     Int     @unique
  rating            Int     @default(0)
  review            String? @db.Text
  duration          Int?
  completion        Int?
  completionComment String? @db.VarChar(255)

  pros BacklogItemReviewPros[]
  cons BacklogItemReviewCons[]

  backlogItem BacklogItem @relation(fields: [backlogItemId], references: [id], onDelete: Cascade)
}

model BacklogItemReviewPros {
  id                  Int    @id @default(autoincrement())
  backlogItemReviewId Int
  value               String @db.VarChar(255)

  backlogItemReview BacklogItemReview @relation(fields: [backlogItemReviewId], references: [id])
}

model BacklogItemReviewCons {
  id                  Int    @id @default(autoincrement())
  backlogItemReviewId Int
  value               String @db.VarChar(255)

  backlogItemReview BacklogItemReview @relation(fields: [backlogItemReviewId], references: [id])
}

model BlogPost {
  id           Int        @id @default(autoincrement())
  filename     String     @unique @db.VarChar(255)
  bannerUrl    String     @db.VarChar(255)
  thumbnailUrl String     @db.VarChar(255)
  category     Category
  state        BlogStatus
  postAt       DateTime
  description  String     @db.Text()
  tags         Tag[]
}

model CardType {
  id                 Int               @id @default(autoincrement())
  name               String            @unique @db.VarChar(255)
  description        String            @db.VarChar(255)
  level              Int
  imageName          String            @unique @db.VarChar(255)
  isFusion           Int               @default(0) @db.TinyInt
  lore               String            @db.Text
  possibleFusions    CardType[]        @relation("CardFusions")
  fusionDependencies CardType[]        @relation("CardFusions")
  playerInventory    PlayerInventory[]
  dailyShopItems     DailyShopItem[]
}

model Config {
  id    Int    @id @default(autoincrement())
  name  String @unique @db.VarChar(255)
  value Json
}

model DailyPurchase {
  id              Int           @id @default(autoincrement())
  playerId        Int
  dailyShopItemId Int
  dailyShopItem   DailyShopItem @relation(fields: [dailyShopItemId], references: [id])
  player          Player        @relation(fields: [playerId], references: [id])

  @@unique([playerId, dailyShopItemId])
  @@index([dailyShopItemId])
  @@index([playerId])
}

model DailyShop {
  id             Int             @id @default(autoincrement())
  shopDay        Int
  shopMonth      Int
  shopYear       Int
  threadId       String
  dailyShopItems DailyShopItem[]

  @@unique([shopDay, shopMonth, shopYear])
}

model DailyShopItem {
  id            Int             @id @default(autoincrement())
  cardTypeId    Int
  dailyShopId   Int
  type          String          @db.VarChar(255)
  price         Int
  cardType      CardType        @relation(fields: [cardTypeId], references: [id])
  dailyShop     DailyShop       @relation(fields: [dailyShopId], references: [id])
  dailyPurchase DailyPurchase[]

  @@unique([cardTypeId, dailyShopId])
  @@index([dailyShopId])
  @@index([cardTypeId])
}

model DiscordNotificationChannel {
  id               Int                 @id @default(autoincrement())
  discordChannelId String
  notificationType ChannelNotification @unique
}

model ExpectedGame {
  id           Int                      @id @default(autoincrement())
  igdbId       Int
  name         String                   @db.VarChar(255)
  url          String                   @db.VarChar(255)
  addToBacklog Boolean
  cancelled    Boolean?
  userId       Int
  releaseDate  ExpectedGameReleaseDate?
  user         User                     @relation(fields: [userId], references: [id])

  @@unique([igdbId, userId])
}

model ExpectedGameReleaseDate {
  id             Int          @id @default(autoincrement())
  date           DateTime?
  platformId     Int
  region         Int
  expectedGameId Int          @unique
  expectedGame   ExpectedGame @relation(fields: [expectedGameId], references: [id], onDelete: Cascade)
}

model GameCache {
  id      Int  @id @default(autoincrement())
  igdbId  Int  @unique
  content Json
}

model Gift {
  id                Int      @id @default(autoincrement())
  beginningDatetime DateTime @db.DateTime(0)
  endDatetime       DateTime @db.DateTime(0)
  code              String   @unique @db.VarChar(255)
  bonus             Json
  players           Player[]
}

model Pagination {
  id               Int    @id @default(autoincrement())
  page             Int
  discordMessageId String @unique @db.VarChar(255)
  discordUserId    String @db.VarChar(255)
}

model Player {
  id                 Int       @id @default(autoincrement())
  points             Int
  lastMessageDate    DateTime  @default(now()) @db.DateTime(0)
  lastDailyDraw      DateTime? @db.DateTime(0)
  lastPointsReminder DateTime? @db.DateTime(0)
  wantToBeWarn       Boolean   @default(false)
  joinDate           DateTime  @default(now()) @db.DateTime(0)
  userId             Int       @unique
  finishRank         Int?      @unique

  gifts           Gift[]
  playerInventory PlayerInventory[]
  dailyPurchase   DailyPurchase[]
  user            User              @relation(fields: [userId], references: [id])
}

model PlayerInventory {
  id         Int      @id @default(autoincrement())
  total      Int
  playerId   Int
  cardTypeId Int
  type       String   @db.VarChar(255)
  cardType   CardType @relation(fields: [cardTypeId], references: [id])
  player     Player   @relation(fields: [playerId], references: [id])

  @@unique([playerId, cardTypeId, type])
  @@index([cardTypeId])
  @@index([playerId])
}

model Tag {
  id       Int        @id @default(autoincrement())
  name     String     @unique @db.VarChar(255)
  blogPost BlogPost[]
}

model User {
  id             Int            @id @default(autoincrement())
  discordId      String         @unique @db.VarChar(255)
  twitchUsername String?        @unique @db.VarChar(255)
  username       String         @db.VarChar(255)
  isActive       Boolean        @default(true)
  player         Player?
  backlogItems   BacklogItem[]
  expectedGames  ExpectedGame[]
  aiAttempts     AiAttempt[]
}

model AiAttempt {
  id        Int      @id @default(autoincrement())
  userId    Int
  createdAt DateTime

  user User @relation(fields: [userId], references: [id])
}

//-- Enums

enum BacklogStatus {
  BACKLOG
  CURRENTLY
  FINISHED
  ABANDONED
  WISHLIST
}

enum BlogStatus {
  PUBLISHED
  NOT_PUBLISHED
}

enum Category {
  NEWS
  TECH
  VIDEOGAME
  OTHER
}

enum ChannelNotification {
  BIRTHDAY
  MEME
  SHOP
}
