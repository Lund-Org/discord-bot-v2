generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["clientExtensions"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Birthday {
  id            Int    @id @default(autoincrement())
  discordId     String @unique @db.VarChar(255)
  birthdayDay   Int
  birthdayMonth Int
  birthdayYear  Int
}

model BacklogItem {
  id         Int           @id @default(autoincrement())
  playerId   Int
  igdbGameId Int
  name       String
  category   String
  url        String
  status     BacklogStatus @default(BACKLOG)

  player Player @relation(fields: [playerId], references: [id])

  @@unique([playerId, igdbGameId])
}

model BlogPost {
  id           Int        @id @default(autoincrement())
  filename     String     @unique @db.VarChar(255)
  bannerUrl    String     @db.VarChar(255)
  thumbnailUrl String     @db.VarChar(255)
  category     Category
  state        BlogStatus
  postAt       DateTime
  description  String     @db.Text()
  tags         Tag[]
}

model CardType {
  id                 Int               @id @default(autoincrement())
  name               String            @unique @db.VarChar(255)
  description        String            @db.VarChar(255)
  level              Int
  imageName          String            @unique @db.VarChar(255)
  isFusion           Int               @default(0) @db.TinyInt
  lore               String            @db.Text
  possibleFusions    CardType[]        @relation("CardFusions")
  fusionDependencies CardType[]        @relation("CardFusions")
  playerInventory    PlayerInventory[]
  dailyShopItems     DailyShopItem[]
}

model Config {
  id    Int    @id @default(autoincrement())
  name  String @unique @db.VarChar(255)
  value Json
}

model DailyPurchase {
  id              Int           @id @default(autoincrement())
  playerId        Int
  dailyShopItemId Int
  dailyShopItem   DailyShopItem @relation(fields: [dailyShopItemId], references: [id])
  player          Player        @relation(fields: [playerId], references: [id])

  @@unique([playerId, dailyShopItemId])
  @@index([dailyShopItemId])
  @@index([playerId])
}

model DailyShop {
  id             Int             @id @default(autoincrement())
  shopDay        Int
  shopMonth      Int
  shopYear       Int
  threadId       String
  dailyShopItems DailyShopItem[]

  @@unique([shopDay, shopMonth, shopYear])
}

model DailyShopItem {
  id            Int             @id @default(autoincrement())
  cardTypeId    Int
  dailyShopId   Int
  type          String          @db.VarChar(255)
  price         Int
  cardType      CardType        @relation(fields: [cardTypeId], references: [id])
  dailyShop     DailyShop       @relation(fields: [dailyShopId], references: [id])
  dailyPurchase DailyPurchase[]

  @@unique([cardTypeId, dailyShopId])
  @@index([dailyShopId])
  @@index([cardTypeId])
}

model Gift {
  id                Int      @id @default(autoincrement())
  beginningDatetime DateTime @db.DateTime(0)
  endDatetime       DateTime @db.DateTime(0)
  code              String   @unique @db.VarChar(255)
  bonus             Json
  players           Player[]
}

model Pagination {
  id               Int    @id @default(autoincrement())
  page             Int
  discordMessageId String @unique @db.VarChar(255)
  discordUserId    String @db.VarChar(255)
}

model Player {
  id              Int               @id @default(autoincrement())
  discordId       String            @unique @db.VarChar(255)
  points          Int
  lastMessageDate DateTime          @default(now()) @db.DateTime(0)
  lastDailyDraw   DateTime?         @db.DateTime(0)
  joinDate        DateTime          @default(now()) @db.DateTime(0)
  twitchUsername  String?           @unique @db.VarChar(255)
  username        String            @db.VarChar(255)
  gifts           Gift[]
  backlogItems    BacklogItem[]
  playerInventory PlayerInventory[]
  dailyPurchase   DailyPurchase[]
}

model PlayerInventory {
  id         Int      @id @default(autoincrement())
  total      Int
  playerId   Int
  cardTypeId Int
  type       String   @db.VarChar(255)
  cardType   CardType @relation(fields: [cardTypeId], references: [id])
  player     Player   @relation(fields: [playerId], references: [id])

  @@unique([playerId, cardTypeId, type])
  @@index([cardTypeId])
  @@index([playerId])
}

model Tag {
  id       Int        @id @default(autoincrement())
  name     String     @unique @db.VarChar(255)
  blogPost BlogPost[]
}

//-- Enums

enum BacklogStatus {
  BACKLOG
  CURRENTLY
  FINISHED
}

enum BlogStatus {
  PUBLISHED
  NOT_PUBLISHED
}

enum Category {
  NEWS
  TECH
  VIDEO
  OTHER
}
